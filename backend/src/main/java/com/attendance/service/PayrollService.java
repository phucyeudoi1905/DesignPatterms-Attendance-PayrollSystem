package com.attendance.service;

import com.attendance.model.Attendance;
import com.attendance.model.ContractType;
import com.attendance.model.Employee;
import com.attendance.model.Payroll;
import com.attendance.repository.AttendanceRepository;
import com.attendance.repository.EmployeeRepository;
import com.attendance.repository.PayrollRepository;
import com.attendance.strategy.*;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;

import java.math.BigDecimal;
import java.time.LocalDateTime;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

@Service
public class PayrollService {
    
    @Autowired
    private EmployeeRepository employeeRepository;
    
    @Autowired
    private AttendanceRepository attendanceRepository;
    
    @Autowired
    private PayrollRepository payrollRepository;
    
    @Autowired
    private FixedSalaryCalculation fixedSalaryCalculation;
    
    @Autowired
    private HourlySalaryCalculation hourlySalaryCalculation;
    
    @Autowired
    private ProductBasedSalaryCalculation productBasedSalaryCalculation;
    
    @Autowired
    private KpiBasedSalaryCalculation kpiBasedSalaryCalculation;
    
    private Map<ContractType, SalaryCalculationStrategy> strategies;
    
    @Autowired
    public void initStrategies() {
        strategies = new HashMap<>();
        strategies.put(ContractType.FIXED, fixedSalaryCalculation);
        strategies.put(ContractType.HOURLY, hourlySalaryCalculation);
        strategies.put(ContractType.PRODUCT_BASED, productBasedSalaryCalculation);
        strategies.put(ContractType.KPI_BASED, kpiBasedSalaryCalculation);
    }
    
    public Payroll calculateSalary(Long employeeId) {
        try {
            // T√¨m nh√¢n vi√™n
            Employee employee = employeeRepository.findById(employeeId)
                    .orElseThrow(() -> new RuntimeException("Kh√¥ng t√¨m th·∫•y nh√¢n vi√™n v·ªõi ID: " + employeeId));
            
            System.out.println("üìä ƒêang t√≠nh l∆∞∆°ng cho nh√¢n vi√™n: " + employee.getName() + " (ID: " + employeeId + ")");
            System.out.println("üìã Lo·∫°i h·ª£p ƒë·ªìng: " + employee.getContractType());
            
            // L·∫•y danh s√°ch ch·∫•m c√¥ng
            List<Attendance> attendances = attendanceRepository.findByEmployeeId(employeeId);
            System.out.println("‚è∞ S·ªë b·∫£n ghi ch·∫•m c√¥ng: " + attendances.size());
            
            // Ki·ªÉm tra xem strategies ƒë√£ ƒë∆∞·ª£c kh·ªüi t·∫°o ch∆∞a
            if (strategies == null || strategies.isEmpty()) {
                System.out.println("‚ö†Ô∏è Strategies ch∆∞a ƒë∆∞·ª£c kh·ªüi t·∫°o, ƒëang kh·ªüi t·∫°o l·∫°i...");
                initStrategies();
            }
            
            // Ch·ªçn strategy d·ª±a v√†o contractType
            SalaryCalculationStrategy strategy = strategies.get(employee.getContractType());
            if (strategy == null) {
                throw new RuntimeException("Kh√¥ng t√¨m th·∫•y strategy cho lo·∫°i h·ª£p ƒë·ªìng: " + employee.getContractType());
            }
            
            // T√≠nh l∆∞∆°ng
            BigDecimal calculatedSalary = strategy.calculateSalary(employee, attendances);
            System.out.println("üí∞ L∆∞∆°ng ƒë∆∞·ª£c t√≠nh: " + calculatedSalary + " VNƒê");
            
            // Ki·ªÉm tra l∆∞∆°ng h·ª£p l·ªá
            if (calculatedSalary == null || calculatedSalary.compareTo(BigDecimal.ZERO) < 0) {
                throw new RuntimeException("L∆∞∆°ng t√≠nh to√°n kh√¥ng h·ª£p l·ªá: " + calculatedSalary);
            }
            
            // L∆∞u payroll v√†o database
            Payroll payroll = new Payroll();
            payroll.setEmployeeId(employeeId);
            payroll.setSalary(calculatedSalary);
            payroll.setCalculationType(employee.getContractType().name());
            payroll.setCreatedDate(LocalDateTime.now());
            
            Payroll savedPayroll = payrollRepository.save(payroll);
            System.out.println("‚úÖ ƒê√£ l∆∞u b·∫£n ghi l∆∞∆°ng v·ªõi ID: " + savedPayroll.getId());
            
            return savedPayroll;
            
        } catch (Exception e) {
            System.err.println("‚ùå L·ªói khi t√≠nh l∆∞∆°ng cho nh√¢n vi√™n ID " + employeeId + ": " + e.getMessage());
            e.printStackTrace();
            throw new RuntimeException("L·ªói khi t√≠nh l∆∞∆°ng: " + e.getMessage(), e);
        }
    }
    
    public List<Payroll> getPayrollHistory(Long employeeId) {
        return payrollRepository.findByEmployeeId(employeeId);
    }
}


